{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc cam\\\\Desktop\\\\soc\\\\src\\\\Components\\\\Pages\\\\Requests\\\\Form.js\";\nimport React, { Component } from 'react';\nimport Input from './InputElement';\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Full Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Adress'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        category: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'All categories',\n              displayValue: 'All categories'\n            }, {\n              value: 'Social aid',\n              displayValue: 'Social aid'\n            }, {\n              value: 'Health services',\n              displayValue: 'Health services'\n            }, {\n              value: 'Solidarity',\n              displayValue: 'Solidarity'\n            }, {\n              value: 'Other services',\n              displayValue: 'Other services'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        },\n        offers: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'All offers',\n              displayValue: 'All offers'\n            }, {\n              value: 'Social aid',\n              displayValue: 'Social aid'\n            }, {\n              value: 'Health services',\n              displayValue: 'Health services'\n            }, {\n              value: 'Solidarity',\n              displayValue: 'Solidarity'\n            }, {\n              value: 'Other services',\n              displayValue: 'Other services'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    })));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, form);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/pc cam/Desktop/soc/src/Components/Pages/Requests/Form.js"],"names":["React","Component","Input","Form","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","category","options","displayValue","offers","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","pattern","test","render","formElementsArray","key","push","id","config","form","map","formElement"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAIA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBG,KADyB,GACjB;AACJC,MAAAA,SAAS,EAAE;AACPC,QAAAA,IAAI,EAAE;AACFC,UAAAA,WAAW,EAAE,OADX;AAEFC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFb;AAMFC,UAAAA,KAAK,EAAE,EANL;AAOFC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPV;AAUFC,UAAAA,KAAK,EAAE,KAVL;AAWFC,UAAAA,OAAO,EAAE;AAXP,SADC;AAcPC,QAAAA,MAAM,EAAE;AACJT,UAAAA,WAAW,EAAE,OADT;AAEJC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFX;AAMJC,UAAAA,KAAK,EAAE,EANH;AAOJC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPR;AAUJC,UAAAA,KAAK,EAAE,KAVH;AAWJC,UAAAA,OAAO,EAAE;AAXL,SAdD;AA2BPE,QAAAA,OAAO,EAAE;AACLV,UAAAA,WAAW,EAAE,OADR;AAELC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFV;AAMLC,UAAAA,KAAK,EAAE,EANF;AAOLC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERK,YAAAA,SAAS,EAAE,CAFH;AAGRC,YAAAA,SAAS,EAAE,CAHH;AAIRC,YAAAA,SAAS,EAAE;AAJH,WAPP;AAaLN,UAAAA,KAAK,EAAE,KAbF;AAcLC,UAAAA,OAAO,EAAE;AAdJ,SA3BF;AA2CPM,QAAAA,OAAO,EAAE;AACLd,UAAAA,WAAW,EAAE,OADR;AAELC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFV;AAMLC,UAAAA,KAAK,EAAE,EANF;AAOLC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPP;AAULC,UAAAA,KAAK,EAAE,KAVF;AAWLC,UAAAA,OAAO,EAAE;AAXJ,SA3CF;AAwDPO,QAAAA,KAAK,EAAE;AACHf,UAAAA,WAAW,EAAE,OADV;AAEHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFZ;AAMHC,UAAAA,KAAK,EAAE,EANJ;AAOHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERU,YAAAA,OAAO,EAAE;AAFD,WAPT;AAWHT,UAAAA,KAAK,EAAE,KAXJ;AAYHC,UAAAA,OAAO,EAAE;AAZN,SAxDA;AAsEPS,QAAAA,QAAQ,EAAE;AACNjB,UAAAA,WAAW,EAAE,QADP;AAENC,UAAAA,aAAa,EAAE;AACXiB,YAAAA,OAAO,EAAE,CACL;AAACd,cAAAA,KAAK,EAAE,gBAAR;AAA0Be,cAAAA,YAAY,EAAE;AAAxC,aADK,EAEL;AAACf,cAAAA,KAAK,EAAE,YAAR;AAAsBe,cAAAA,YAAY,EAAE;AAApC,aAFK,EAGL;AAACf,cAAAA,KAAK,EAAE,iBAAR;AAA2Be,cAAAA,YAAY,EAAE;AAAzC,aAHK,EAIL;AAACf,cAAAA,KAAK,EAAE,YAAR;AAAsBe,cAAAA,YAAY,EAAE;AAApC,aAJK,EAKL;AAACf,cAAAA,KAAK,EAAE,gBAAR;AAA0Be,cAAAA,YAAY,EAAE;AAAxC,aALK;AADE,WAFT;AAWNf,UAAAA,KAAK,EAAE,EAXD;AAYNC,UAAAA,UAAU,EAAE,EAZN;AAaNE,UAAAA,KAAK,EAAE;AAbD,SAtEH;AAqFPa,QAAAA,MAAM,EAAE;AACJpB,UAAAA,WAAW,EAAE,QADT;AAEJC,UAAAA,aAAa,EAAE;AACXiB,YAAAA,OAAO,EAAE,CACL;AAACd,cAAAA,KAAK,EAAE,YAAR;AAAsBe,cAAAA,YAAY,EAAE;AAApC,aADK,EAEL;AAACf,cAAAA,KAAK,EAAE,YAAR;AAAsBe,cAAAA,YAAY,EAAE;AAApC,aAFK,EAGL;AAACf,cAAAA,KAAK,EAAE,iBAAR;AAA2Be,cAAAA,YAAY,EAAE;AAAzC,aAHK,EAIL;AAACf,cAAAA,KAAK,EAAE,YAAR;AAAsBe,cAAAA,YAAY,EAAE;AAApC,aAJK,EAKL;AAACf,cAAAA,KAAK,EAAE,gBAAR;AAA0Be,cAAAA,YAAY,EAAE;AAAxC,aALK;AADE,WAFX;AAWJf,UAAAA,KAAK,EAAE,EAXH;AAYJC,UAAAA,UAAU,EAAE,EAZR;AAaJE,UAAAA,KAAK,EAAE;AAbH;AArFD,OADP;AAsGJc,MAAAA,WAAW,EAAE,KAtGT;AAuGJC,MAAAA,OAAO,EAAE;AAvGL,KADiB;;AAAA,SA2GzBC,YA3GyB,GA2GRC,KAAF,IAAa;AACxBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,QAAL,CAAe;AAAEJ,QAAAA,OAAO,EAAE;AAAX,OAAf;AACA,YAAMK,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,qBAAT,IAAkC,KAAK/B,KAAL,CAAWC,SAA7C,EAAwD;AACpD6B,QAAAA,QAAQ,CAACC,qBAAD,CAAR,GAAkC,KAAK/B,KAAL,CAAWC,SAAX,CAAqB8B,qBAArB,EAA4CxB,KAA9E;AACH;AACJ,KAlHwB;;AAAA,SAmJzByB,mBAnJyB,GAmJH,CAACL,KAAD,EAAQM,eAAR,KAA4B;AAC9C,YAAMC,gBAAgB,GAAG,EACrB,GAAG,KAAKlC,KAAL,CAAWC;AADO,OAAzB;AAGA,YAAMkC,kBAAkB,GAAG,EACvB,GAAGD,gBAAgB,CAACD,eAAD;AADI,OAA3B;AAGAE,MAAAA,kBAAkB,CAAC5B,KAAnB,GAA2BoB,KAAK,CAACS,MAAN,CAAa7B,KAAxC;AACA4B,MAAAA,kBAAkB,CAACzB,KAAnB,GAA2B,KAAK2B,aAAL,CAAmBF,kBAAkB,CAAC5B,KAAtC,EAA6C4B,kBAAkB,CAAC3B,UAAhE,CAA3B;AACA2B,MAAAA,kBAAkB,CAACxB,OAAnB,GAA6B,IAA7B;AACAuB,MAAAA,gBAAgB,CAACD,eAAD,CAAhB,GAAoCE,kBAApC;AAEA,UAAIX,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAIS,eAAT,IAA4BC,gBAA5B,EAA8C;AAC1CV,QAAAA,WAAW,GAAGU,gBAAgB,CAACD,eAAD,CAAhB,CAAkCvB,KAAlC,IAA2Cc,WAAzD;AACH;;AACD,WAAKK,QAAL,CAAc;AAAC5B,QAAAA,SAAS,EAAEiC,gBAAZ;AAA8BV,QAAAA,WAAW,EAAEA;AAA3C,OAAd;AACH,KApKwB;AAAA;;AAoHzBa,EAAAA,aAAa,CAAC9B,KAAD,EAAQ+B,KAAR,EAAe;AACxB,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAI,CAACD,KAAL,EAAY;AACR,aAAO,IAAP;AACH;;AAED,QAAIA,KAAK,CAAC7B,QAAV,EAAoB;AAChB8B,MAAAA,OAAO,GAAGhC,KAAK,CAACiC,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,QAAID,KAAK,CAACxB,SAAV,EAAqB;AACjByB,MAAAA,OAAO,GAAGhC,KAAK,CAACkC,MAAN,IAAgBH,KAAK,CAACxB,SAAtB,IAAmCyB,OAA7C;AACH;;AAED,QAAID,KAAK,CAACvB,SAAV,EAAqB;AACjBwB,MAAAA,OAAO,GAAGhC,KAAK,CAACkC,MAAN,IAAgBH,KAAK,CAACvB,SAAtB,IAAmCwB,OAA7C;AACH;;AAED,QAAID,KAAK,CAACnB,OAAV,EAAmB;AACf,YAAMuB,OAAO,GAAG,uIAAhB;AACAH,MAAAA,OAAO,GAAGG,OAAO,CAACC,IAAR,CAAapC,KAAb,KAAuBgC,OAAjC;AACH;;AAED,QAAID,KAAK,CAACtB,SAAV,EAAqB;AACjB,YAAM0B,OAAO,GAAG,OAAhB;AACAH,MAAAA,OAAO,GAAGG,OAAO,CAACC,IAAR,CAAapC,KAAb,KAAuBgC,OAAjC;AACH;;AAED,WAAOA,OAAP;AACH;;AAqBDK,EAAAA,MAAM,GAAI;AACN,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAK9C,KAAL,CAAWC,SAA3B,EAAsC;AAClC4C,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,QAAAA,EAAE,EAAEF,GADe;AAEnBG,QAAAA,MAAM,EAAE,KAAKjD,KAAL,CAAWC,SAAX,CAAqB6C,GAArB;AAFW,OAAvB;AAIH;;AACD,QAAII,IAAI,gBACJ;AAAM,MAAA,QAAQ,EAAE,KAAKxB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKmB,iBAAiB,CAACM,GAAlB,CAAsBC,WAAW,iBAC9B,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmB9C,WAFpC;AAGI,MAAA,aAAa,EAAEiD,WAAW,CAACH,MAAZ,CAAmB7C,aAHtC;AAII,MAAA,KAAK,EAAEgD,WAAW,CAACH,MAAZ,CAAmB1C,KAJ9B;AAKI,MAAA,OAAO,EAAE,CAAC6C,WAAW,CAACH,MAAZ,CAAmBvC,KALjC;AAMI,MAAA,cAAc,EAAE0C,WAAW,CAACH,MAAZ,CAAmBzC,UANvC;AAOI,MAAA,OAAO,EAAE4C,WAAW,CAACH,MAAZ,CAAmBtC,OAPhC;AAQI,MAAA,OAAO,EAAGgB,KAAD,IAAW,KAAKK,mBAAL,CAAyBL,KAAzB,EAAgCyB,WAAW,CAACJ,EAA5C,CARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,CADJ;AAgBA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKE,IADL,CADJ;AAKH;;AAnMwB;;AAsM7B,eAAenD,IAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Input from './InputElement';\r\n\r\n\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Full Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Adress'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            category: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'All categories', displayValue: 'All categories'},\r\n                        {value: 'Social aid', displayValue: 'Social aid'},\r\n                        {value: 'Health services', displayValue: 'Health services'},\r\n                        {value: 'Solidarity', displayValue: 'Solidarity'},\r\n                        {value: 'Other services', displayValue: 'Other services'}\r\n                    ]\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: true\r\n            },\r\n            offers: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'All offers', displayValue: 'All offers'},\r\n                        {value: 'Social aid', displayValue: 'Social aid'},\r\n                        {value: 'Health services', displayValue: 'Health services'},\r\n                        {value: 'Solidarity', displayValue: 'Solidarity'},\r\n                        {value: 'Other services', displayValue: 'Other services'}\r\n                    ]\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        loading: false\r\n    }\r\n\r\n    orderHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.setState( { loading: true } );\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }  \r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true;\r\n        }\r\n        \r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = { \r\n            ...updatedOrderForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n        \r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n            </form>\r\n        );\r\n       \r\n        return (\r\n            <div >\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}