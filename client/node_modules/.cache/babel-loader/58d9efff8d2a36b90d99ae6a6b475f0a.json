{"ast":null,"code":"import axios from 'axios';\nimport { GET_MESSAGES, SEND_MESSAGE, CLEAR_MESSAGES, SET_LOADING_MESSAGES, SET_LOADING_SEND_MESSAGE, GET_MESSAGES_ERROR, SEND_MESSAGE_ERROR, TOGGLE_FAV_ERROR, CLEAR_ERRORS } from '../types'; // Get messages\n\nexport const getMessages = () => async dispatch => {\n  try {\n    dispatch(setLoadingMessages());\n    const res = await axios.get('/api/messages');\n    dispatch({\n      type: GET_MESSAGES,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response;\n\n    dispatch({\n      type: GET_MESSAGES_ERROR,\n      payload: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data\n    });\n  }\n}; // Send message\n\nexport const sendMessage = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    dispatch(setLoadingMessageSend());\n    const res = await axios.post('/api/messages/', formData, config);\n    dispatch({\n      type: SEND_MESSAGE,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response2;\n\n    dispatch({\n      type: SEND_MESSAGE_ERROR,\n      payload: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n    });\n  }\n}; // Toggle message fav\n\nexport const toggleFav = id => async dispatch => {\n  try {\n    await axios.put('/api/messages/fav/' + id);\n  } catch (error) {\n    var _error$response3;\n\n    dispatch({\n      type: TOGGLE_FAV_ERROR,\n      payload: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data\n    });\n  }\n}; // Clear messages\n\nexport const clearMessages = () => {\n  return {\n    type: CLEAR_MESSAGES\n  };\n}; // Set loading messages to true\n\nexport const setLoadingMessages = () => {\n  return {\n    type: SET_LOADING_MESSAGES\n  };\n}; // Set loading message send to true\n\nexport const setLoadingMessageSend = () => {\n  return {\n    type: SET_LOADING_SEND_MESSAGE\n  };\n}; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n};","map":{"version":3,"sources":["C:/Users/pc cam/Desktop/master/client/src/redux/actions/messageActions.js"],"names":["axios","GET_MESSAGES","SEND_MESSAGE","CLEAR_MESSAGES","SET_LOADING_MESSAGES","SET_LOADING_SEND_MESSAGE","GET_MESSAGES_ERROR","SEND_MESSAGE_ERROR","TOGGLE_FAV_ERROR","CLEAR_ERRORS","getMessages","dispatch","setLoadingMessages","res","get","type","payload","data","error","response","sendMessage","formData","config","headers","setLoadingMessageSend","post","toggleFav","id","put","clearMessages","clearErrors"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,YADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,oBAJF,EAKEC,wBALF,EAMEC,kBANF,EAOEC,kBAPF,EAQEC,gBARF,EASEC,YATF,QAUO,UAVP,C,CAYA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACnD,MAAI;AACFA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,eAAV,CAAlB;AAEAH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEd,YADC;AAEPe,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GARD,CAQE,OAAOC,KAAP,EAAc;AAAA;;AACdP,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAET,kBADC;AAEPU,MAAAA,OAAO,qBAAEE,KAAK,CAACC,QAAR,oDAAE,gBAAgBF;AAFlB,KAAD,CAAR;AAID;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMG,WAAW,GAAIC,QAAD,IAAc,MAAOV,QAAP,IAAoB;AAC3D,QAAMW,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAI;AACFZ,IAAAA,QAAQ,CAACa,qBAAqB,EAAtB,CAAR;AACA,UAAMX,GAAG,GAAG,MAAMb,KAAK,CAACyB,IAAN,CAAW,gBAAX,EAA6BJ,QAA7B,EAAuCC,MAAvC,CAAlB;AAEAX,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEb,YAAR;AAAsBc,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAnC,KAAD,CAAR;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AAAA;;AACdP,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,kBADC;AAEPS,MAAAA,OAAO,sBAAEE,KAAK,CAACC,QAAR,qDAAE,iBAAgBF;AAFlB,KAAD,CAAR;AAID;AACF,CAlBM,C,CAoBP;;AACA,OAAO,MAAMS,SAAS,GAAIC,EAAD,IAAQ,MAAOhB,QAAP,IAAoB;AACnD,MAAI;AACF,UAAMX,KAAK,CAAC4B,GAAN,CAAU,uBAAuBD,EAAjC,CAAN;AACD,GAFD,CAEE,OAAOT,KAAP,EAAc;AAAA;;AACdP,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEP,gBADC;AAEPQ,MAAAA,OAAO,sBAAEE,KAAK,CAACC,QAAR,qDAAE,iBAAgBF;AAFlB,KAAD,CAAR;AAID;AACF,CATM,C,CAWP;;AACA,OAAO,MAAMY,aAAa,GAAG,MAAM;AACjC,SAAO;AAAEd,IAAAA,IAAI,EAAEZ;AAAR,GAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMS,kBAAkB,GAAG,MAAM;AACtC,SAAO;AAAEG,IAAAA,IAAI,EAAEX;AAAR,GAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMoB,qBAAqB,GAAG,MAAM;AACzC,SAAO;AAAET,IAAAA,IAAI,EAAEV;AAAR,GAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMyB,WAAW,GAAG,MAAM;AAC/B,SAAO;AAAEf,IAAAA,IAAI,EAAEN;AAAR,GAAP;AACD,CAFM","sourcesContent":["import axios from 'axios';\n\nimport {\n  GET_MESSAGES,\n  SEND_MESSAGE,\n  CLEAR_MESSAGES,\n  SET_LOADING_MESSAGES,\n  SET_LOADING_SEND_MESSAGE,\n  GET_MESSAGES_ERROR,\n  SEND_MESSAGE_ERROR,\n  TOGGLE_FAV_ERROR,\n  CLEAR_ERRORS,\n} from '../types';\n\n// Get messages\nexport const getMessages = () => async (dispatch) => {\n  try {\n    dispatch(setLoadingMessages());\n    const res = await axios.get('/api/messages');\n\n    dispatch({\n      type: GET_MESSAGES,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_MESSAGES_ERROR,\n      payload: error.response?.data,\n    });\n  }\n};\n\n// Send message\nexport const sendMessage = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    dispatch(setLoadingMessageSend());\n    const res = await axios.post('/api/messages/', formData, config);\n\n    dispatch({ type: SEND_MESSAGE, payload: res.data });\n  } catch (error) {\n    dispatch({\n      type: SEND_MESSAGE_ERROR,\n      payload: error.response?.data,\n    });\n  }\n};\n\n// Toggle message fav\nexport const toggleFav = (id) => async (dispatch) => {\n  try {\n    await axios.put('/api/messages/fav/' + id);\n  } catch (error) {\n    dispatch({\n      type: TOGGLE_FAV_ERROR,\n      payload: error.response?.data,\n    });\n  }\n};\n\n// Clear messages\nexport const clearMessages = () => {\n  return { type: CLEAR_MESSAGES };\n};\n\n// Set loading messages to true\nexport const setLoadingMessages = () => {\n  return { type: SET_LOADING_MESSAGES };\n};\n\n// Set loading message send to true\nexport const setLoadingMessageSend = () => {\n  return { type: SET_LOADING_SEND_MESSAGE };\n};\n\n// Clear errors\nexport const clearErrors = () => {\n  return { type: CLEAR_ERRORS };\n};\n"]},"metadata":{},"sourceType":"module"}