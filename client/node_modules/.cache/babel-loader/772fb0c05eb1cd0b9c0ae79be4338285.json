{"ast":null,"code":"import axios from 'axios';\nimport { GET_USER_PHONE, CLEAR_USER_PHONE, GET_PHONE_ERROR, SEND_MESSAGE, GET_CONVERSATIONS, GET_CONVERSATION_BY_ID, MESSAGE_ERROR, SEND_MESSAGE_ERROR, SET_LOADING_PHONE, SET_LOADING_MESSAGE, SET_LOADING_SEND_MESSAGE, CLEAR_ERRORS } from '../types';\nimport { URL as Api } from './api'; // Get user phone\n\nexport const getUserPhone = id => async dispatch => {\n  try {\n    dispatch(setLoadingPhone());\n    const res = await axios.get(Api + `/posts/user/${id}`);\n    dispatch({\n      type: GET_USER_PHONE,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n\n    console.log(error);\n    dispatch({\n      type: GET_PHONE_ERROR,\n      payload: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg\n    });\n  }\n}; // Get conversations\n\nexport const getConversations = () => async dispatch => {\n  try {\n    dispatch(setLoadingMessage());\n    const res = await axios.get(Api + '/conversations');\n    dispatch({\n      type: GET_CONVERSATIONS,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n\n    console.log(error);\n    dispatch({\n      type: MESSAGE_ERROR,\n      payload: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.msg\n    });\n  }\n}; // Get conversation by Id\n\nexport const getConversationById = id => async dispatch => {\n  try {\n    dispatch(setLoadingMessage());\n    const res = await axios.get(Api + `/conversations/${id}`);\n    dispatch({\n      type: GET_CONVERSATION_BY_ID,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n\n    console.log(error);\n    dispatch({\n      type: MESSAGE_ERROR,\n      payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.msg) || 'Error'\n    });\n  }\n}; // Send message\n\nexport const sendMessage = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    dispatch(setLoadingMessageSend());\n    const res = await axios.post(Api + '/conversations', formData, config);\n    dispatch({\n      type: SEND_MESSAGE,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n\n    console.log(error);\n    dispatch({\n      type: SEND_MESSAGE_ERROR,\n      payload: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.msg\n    });\n  }\n}; // Clear user phone\n\nexport const clearUserPhone = () => async dispatch => {\n  dispatch({\n    type: CLEAR_USER_PHONE\n  });\n}; // Set loading_phone to true\n\nexport const setLoadingPhone = () => {\n  return {\n    type: SET_LOADING_PHONE\n  };\n}; // Set loading to true\n\nexport const setLoadingMessage = () => {\n  return {\n    type: SET_LOADING_MESSAGE\n  };\n}; // Set loading message to true\n\nexport const setLoadingMessageSend = () => {\n  return {\n    type: SET_LOADING_SEND_MESSAGE\n  };\n}; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n};","map":{"version":3,"sources":["C:/Users/pc cam/Desktop/dirlkhir-master/src/redux/actions/messageActions.js"],"names":["axios","GET_USER_PHONE","CLEAR_USER_PHONE","GET_PHONE_ERROR","SEND_MESSAGE","GET_CONVERSATIONS","GET_CONVERSATION_BY_ID","MESSAGE_ERROR","SEND_MESSAGE_ERROR","SET_LOADING_PHONE","SET_LOADING_MESSAGE","SET_LOADING_SEND_MESSAGE","CLEAR_ERRORS","URL","Api","getUserPhone","id","dispatch","setLoadingPhone","res","get","type","payload","data","error","console","log","response","msg","getConversations","setLoadingMessage","getConversationById","sendMessage","formData","config","headers","setLoadingMessageSend","post","clearUserPhone","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport {\n  GET_USER_PHONE,\n  CLEAR_USER_PHONE,\n  GET_PHONE_ERROR,\n  SEND_MESSAGE,\n  GET_CONVERSATIONS,\n  GET_CONVERSATION_BY_ID,\n  MESSAGE_ERROR,\n  SEND_MESSAGE_ERROR,\n  SET_LOADING_PHONE,\n  SET_LOADING_MESSAGE,\n  SET_LOADING_SEND_MESSAGE,\n  CLEAR_ERRORS,\n} from '../types';\n\nimport { URL as Api } from './api';\n\n// Get user phone\nexport const getUserPhone = (id) => async (dispatch) => {\n  try {\n    dispatch(setLoadingPhone());\n    const res = await axios.get(Api + `/posts/user/${id}`);\n\n    dispatch({ type: GET_USER_PHONE, payload: res.data });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_PHONE_ERROR,\n      payload: error.response?.data?.msg,\n    });\n  }\n};\n\n// Get conversations\nexport const getConversations = () => async (dispatch) => {\n  try {\n    dispatch(setLoadingMessage());\n    const res = await axios.get(Api + '/conversations');\n\n    dispatch({ type: GET_CONVERSATIONS, payload: res.data });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: MESSAGE_ERROR,\n      payload: error.response?.data?.msg,\n    });\n  }\n};\n\n// Get conversation by Id\nexport const getConversationById = (id) => async (dispatch) => {\n  try {\n    dispatch(setLoadingMessage());\n    const res = await axios.get(Api + `/conversations/${id}`);\n\n    dispatch({ type: GET_CONVERSATION_BY_ID, payload: res.data });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: MESSAGE_ERROR,\n      payload: error.response?.data?.msg || 'Error',\n    });\n  }\n};\n\n// Send message\nexport const sendMessage = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    dispatch(setLoadingMessageSend());\n    const res = await axios.post(Api + '/conversations', formData, config);\n\n    dispatch({ type: SEND_MESSAGE, payload: res.data });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: SEND_MESSAGE_ERROR,\n      payload: error.response?.data?.msg,\n    });\n  }\n};\n\n// Clear user phone\nexport const clearUserPhone = () => async (dispatch) => {\n  dispatch({ type: CLEAR_USER_PHONE });\n};\n\n// Set loading_phone to true\nexport const setLoadingPhone = () => {\n  return { type: SET_LOADING_PHONE };\n};\n\n// Set loading to true\nexport const setLoadingMessage = () => {\n  return { type: SET_LOADING_MESSAGE };\n};\n\n// Set loading message to true\nexport const setLoadingMessageSend = () => {\n  return { type: SET_LOADING_SEND_MESSAGE };\n};\n\n// Clear errors\nexport const clearErrors = () => {\n  return { type: CLEAR_ERRORS };\n};\n"]},"metadata":{},"sourceType":"module"}