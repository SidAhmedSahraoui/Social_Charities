{"ast":null,"code":"import axios from 'axios';\nimport { SET_LOADING_REQUESTS, GET_REQUESTS, GET_REQUESTS_ERROR, CLEAR_REQUESTS, CLEAR_ERRORS, REQUEST_SUCCESS, REQUEST_FAIL } from '../types'; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n}; // Register Request\n\nexport const request = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/request', formData, config);\n    dispatch({\n      type: REQUEST_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response;\n\n    dispatch({\n      type: REQUEST_FAIL,\n      payload: error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data\n    });\n  }\n}; // Get requests\n\nexport const getRequests = () => async dispatch => {\n  try {\n    dispatch(setLoadingRequests());\n    const res = await axios.get('/api/request');\n    dispatch({\n      type: GET_REQUESTS,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response2;\n\n    dispatch({\n      type: GET_REQUESTS_ERROR,\n      payload: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n    });\n  }\n}; // Set loading messages to true\n\nexport const setLoadingRequests = () => {\n  return {\n    type: SET_LOADING_REQUESTS\n  };\n}; // Clear \n\nexport const clearRequests = () => {\n  return {\n    type: CLEAR_REQUESTS\n  };\n};","map":{"version":3,"sources":["C:/Users/pc cam/Desktop/Full-Project/client/src/redux/actions/requestActions.js"],"names":["axios","SET_LOADING_REQUESTS","GET_REQUESTS","GET_REQUESTS_ERROR","CLEAR_REQUESTS","CLEAR_ERRORS","REQUEST_SUCCESS","REQUEST_FAIL","clearErrors","type","request","formData","dispatch","config","headers","res","post","payload","data","error","response","getRequests","setLoadingRequests","get","clearRequests"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,oBADF,EAEEC,YAFF,EAGEC,kBAHF,EAIEC,cAJF,EAKEC,YALF,EAMEC,eANF,EAOEC,YAPF,QAQO,UARP,C,CAWA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAO;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMK,OAAO,GAAIC,QAAD,IAAc,MAAOC,QAAP,IAAoB;AACvD,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAI;AAEF,UAAMC,GAAG,GAAG,MAAMf,KAAK,CAACgB,IAAN,CAAW,cAAX,EAA2BL,QAA3B,EAAqCE,MAArC,CAAlB;AAEAD,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEH,eADC;AAEPW,MAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,KAAD,CAAR;AAKD,GATD,CASE,OAAOC,KAAP,EAAc;AAAA;;AACdP,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEF,YADC;AAEPU,MAAAA,OAAO,EAAEE,KAAF,aAAEA,KAAF,0CAAEA,KAAK,CAAEC,QAAT,oDAAE,gBAAiBF;AAFnB,KAAD,CAAR;AAID;AACF,CAtBM,C,CAwBP;;AACA,OAAO,MAAMG,WAAW,GAAG,MAAM,MAAOT,QAAP,IAAoB;AACnD,MAAI;AACFA,IAAAA,QAAQ,CAACU,kBAAkB,EAAnB,CAAR;AACA,UAAMP,GAAG,GAAG,MAAMf,KAAK,CAACuB,GAAN,CAAU,cAAV,CAAlB;AAEAX,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEP,YADC;AAEPe,MAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,KAAD,CAAR;AAID,GARD,CAQE,OAAOC,KAAP,EAAc;AAAA;;AACdP,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEN,kBADC;AAEPc,MAAAA,OAAO,sBAAEE,KAAK,CAACC,QAAR,qDAAE,iBAAgBF;AAFlB,KAAD,CAAR;AAID;AACF,CAfM,C,CAgBP;;AACA,OAAO,MAAMI,kBAAkB,GAAG,MAAM;AACtC,SAAO;AAAEb,IAAAA,IAAI,EAAER;AAAR,GAAP;AACD,CAFM,C,CAKP;;AACA,OAAO,MAAMuB,aAAa,GAAG,MAAM;AACjC,SAAO;AAAEf,IAAAA,IAAI,EAAEL;AAAR,GAAP;AACD,CAFM","sourcesContent":["import axios from 'axios';\r\n\r\nimport {\r\n  SET_LOADING_REQUESTS,\r\n  GET_REQUESTS,\r\n  GET_REQUESTS_ERROR,\r\n  CLEAR_REQUESTS,\r\n  CLEAR_ERRORS,\r\n  REQUEST_SUCCESS,\r\n  REQUEST_FAIL,\r\n} from '../types';\r\n\r\n\r\n// Clear errors\r\nexport const clearErrors = () => {\r\n  return { type: CLEAR_ERRORS };\r\n};\r\n\r\n// Register Request\r\nexport const request = (formData) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  try {\r\n\r\n    const res = await axios.post('/api/request', formData, config);\r\n\r\n    dispatch({\r\n      type: REQUEST_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n  } catch (error) {\r\n    dispatch({\r\n      type: REQUEST_FAIL,\r\n      payload: error?.response?.data,\r\n    });\r\n  }\r\n};\r\n\r\n// Get requests\r\nexport const getRequests = () => async (dispatch) => {\r\n  try {\r\n    dispatch(setLoadingRequests());\r\n    const res = await axios.get('/api/request');\r\n\r\n    dispatch({\r\n      type: GET_REQUESTS,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_REQUESTS_ERROR,\r\n      payload: error.response?.data,\r\n    });\r\n  }\r\n};\r\n// Set loading messages to true\r\nexport const setLoadingRequests = () => {\r\n  return { type: SET_LOADING_REQUESTS };\r\n};\r\n\r\n\r\n// Clear \r\nexport const clearRequests = () => {\r\n  return { type: CLEAR_REQUESTS };\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}