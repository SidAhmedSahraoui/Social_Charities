{"ast":null,"code":"import axios from 'axios';\nimport { GET_STATES, GET_STATE_CITIES, CLEAR_STATE_CITIES, SET_LOADING_STATES, SET_LOADING_STATE_CITIES, LOCATION_ERROR, CLEAR_ERRORS } from '../types';\nimport { URL as Api } from './api'; // Get states\n\nexport const getStates = () => async dispatch => {\n  try {\n    dispatch(setLoadingStates());\n    const res = await axios.get(Api + `/wilayas`);\n    dispatch({\n      type: GET_STATES,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n\n    console.log(error);\n    dispatch({\n      type: LOCATION_ERROR,\n      payload: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg\n    });\n  }\n}; // Get state's cities\n\nexport const getStateCities = stateId => async dispatch => {\n  try {\n    dispatch(setLoadingStateCities());\n    const res = await axios.get(Api + `/cities/wilaya/${stateId}`);\n    dispatch({\n      type: GET_STATE_CITIES,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n\n    console.log(error);\n    dispatch({\n      type: LOCATION_ERROR,\n      payload: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.msg\n    });\n  }\n}; // Clear wilayas's cities\n\nexport const clearCities = () => async dispatch => {\n  dispatch({\n    type: CLEAR_STATE_CITIES\n  });\n}; // Set loading states to true\n\nexport const setLoadingStates = () => {\n  return {\n    type: SET_LOADING_STATES\n  };\n}; // Set loading state cities to true\n\nexport const setLoadingStateCities = () => {\n  return {\n    type: SET_LOADING_STATE_CITIES\n  };\n}; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n};","map":{"version":3,"sources":["C:/Users/pc cam/Desktop/dirlkhir-master/src/redux/actions/locationActions.js"],"names":["axios","GET_STATES","GET_STATE_CITIES","CLEAR_STATE_CITIES","SET_LOADING_STATES","SET_LOADING_STATE_CITIES","LOCATION_ERROR","CLEAR_ERRORS","URL","Api","getStates","dispatch","setLoadingStates","res","get","type","payload","data","error","console","log","response","msg","getStateCities","stateId","setLoadingStateCities","clearCities","clearErrors"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,UADF,EAEEC,gBAFF,EAGEC,kBAHF,EAIEC,kBAJF,EAKEC,wBALF,EAMEC,cANF,EAOEC,YAPF,QAQO,UARP;AAUA,SAASC,GAAG,IAAIC,GAAhB,QAA2B,OAA3B,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACFA,IAAAA,QAAQ,CAACC,gBAAgB,EAAjB,CAAR;AAEA,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUL,GAAG,GAAI,UAAjB,CAAlB;AAEAE,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEd,UADC;AAEPe,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GATD,CASE,OAAOC,KAAP,EAAc;AAAA;;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAET,cADC;AAEPU,MAAAA,OAAO,qBAAEE,KAAK,CAACG,QAAR,4EAAE,gBAAgBJ,IAAlB,yDAAE,qBAAsBK;AAFxB,KAAD,CAAR;AAID;AACF,CAjBM,C,CAmBP;;AACA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAa,MAAOb,QAAP,IAAoB;AAC7D,MAAI;AACFA,IAAAA,QAAQ,CAACc,qBAAqB,EAAtB,CAAR;AAEA,UAAMZ,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUL,GAAG,GAAI,kBAAiBe,OAAQ,EAA1C,CAAlB;AAEAb,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEb,gBADC;AAEPc,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GATD,CASE,OAAOC,KAAP,EAAc;AAAA;;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAET,cADC;AAEPU,MAAAA,OAAO,sBAAEE,KAAK,CAACG,QAAR,8EAAE,iBAAgBJ,IAAlB,0DAAE,sBAAsBK;AAFxB,KAAD,CAAR;AAID;AACF,CAjBM,C,CAmBP;;AACA,OAAO,MAAMI,WAAW,GAAG,MAAM,MAAOf,QAAP,IAAoB;AACnDA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAR;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMS,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLG,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMqB,qBAAqB,GAAG,MAAM;AACzC,SAAO;AACLV,IAAAA,IAAI,EAAEV;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMsB,WAAW,GAAG,MAAM;AAC/B,SAAO;AAAEZ,IAAAA,IAAI,EAAER;AAAR,GAAP;AACD,CAFM","sourcesContent":["import axios from 'axios';\n\nimport {\n  GET_STATES,\n  GET_STATE_CITIES,\n  CLEAR_STATE_CITIES,\n  SET_LOADING_STATES,\n  SET_LOADING_STATE_CITIES,\n  LOCATION_ERROR,\n  CLEAR_ERRORS,\n} from '../types';\n\nimport { URL as Api } from './api';\n\n// Get states\nexport const getStates = () => async (dispatch) => {\n  try {\n    dispatch(setLoadingStates());\n\n    const res = await axios.get(Api + `/wilayas`);\n\n    dispatch({\n      type: GET_STATES,\n      payload: res.data,\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: LOCATION_ERROR,\n      payload: error.response?.data?.msg,\n    });\n  }\n};\n\n// Get state's cities\nexport const getStateCities = (stateId) => async (dispatch) => {\n  try {\n    dispatch(setLoadingStateCities());\n\n    const res = await axios.get(Api + `/cities/wilaya/${stateId}`);\n\n    dispatch({\n      type: GET_STATE_CITIES,\n      payload: res.data,\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: LOCATION_ERROR,\n      payload: error.response?.data?.msg,\n    });\n  }\n};\n\n// Clear wilayas's cities\nexport const clearCities = () => async (dispatch) => {\n  dispatch({ type: CLEAR_STATE_CITIES });\n};\n\n// Set loading states to true\nexport const setLoadingStates = () => {\n  return {\n    type: SET_LOADING_STATES,\n  };\n};\n\n// Set loading state cities to true\nexport const setLoadingStateCities = () => {\n  return {\n    type: SET_LOADING_STATE_CITIES,\n  };\n};\n\n// Clear errors\nexport const clearErrors = () => {\n  return { type: CLEAR_ERRORS };\n};\n"]},"metadata":{},"sourceType":"module"}