{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc cam\\\\Desktop\\\\soc\\\\src\\\\Components\\\\Login\\\\Login.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types'; // Actions\n\nimport { login, clearErrors } from '../Auth/Auth'; // import { setAlert } from '../Auth/Auth';\n// Utils\n\nimport { WEBSITE_NAME } from '../../utils/websiteData'; // Components\n\nimport Spinner from '../Spinner/Spinner';\nimport useStyles from './auth-jss';\n\nconst Login = props => {\n  const {\n    loading,\n    login // setAlert,\n\n  } = props;\n  const classes = useStyles();\n  const [user, setUser] = useState({\n    username: '',\n    password: ''\n  });\n  const {\n    username,\n    password\n  } = user;\n\n  const onChange = e => setUser({ ...user,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (username === '' || password === '') {\n      setAlert('Please enter all fields');\n    } else {\n      login({\n        username,\n        password\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, `${WEBSITE_NAME} | Login`)), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${classes.root} card-shadow text-center`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Sign in\"), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Use your email and password provided\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 70\n    }\n  }), \" by your organization\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"mt-4\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-text\",\n    type: \"text\",\n    name: \"username\",\n    value: username,\n    placeholder: \"Username\",\n    onChange: onChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-text\",\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    placeholder: \"Password\",\n    onChange: onChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  })), loading ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Login\",\n    className: \"button-primary mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"form-link mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Login Trouble?\", ' ', /*#__PURE__*/React.createElement(Link, {\n    to: \"/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Reset password\")))));\n};\n\nLogin.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  login: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired // setAlert: PropTypes.func.isRequired,\n\n};\n\nconst mapSateToProps = state => ({\n  error: state.auth.error,\n  isAuthenticated: state.auth.isAuthenticated,\n  loading: state.auth.loading\n});\n\nexport default connect(mapSateToProps, {\n  login,\n  clearErrors,\n  setAlert\n})(Login);","map":{"version":3,"sources":["C:/Users/pc cam/Desktop/soc/src/Components/Login/Login.js"],"names":["React","useState","useEffect","Link","connect","Helmet","PropTypes","login","clearErrors","WEBSITE_NAME","Spinner","useStyles","Login","props","loading","classes","user","setUser","username","password","onChange","e","target","name","value","onSubmit","preventDefault","setAlert","root","propTypes","isAuthenticated","bool","error","oneOfType","string","object","func","isRequired","mapSateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Helmet from 'react-helmet';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Actions\r\nimport { login, clearErrors } from '../Auth/Auth';\r\n// import { setAlert } from '../Auth/Auth';\r\n\r\n// Utils\r\nimport { WEBSITE_NAME } from '../../utils/websiteData';\r\n\r\n// Components\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nimport useStyles from './auth-jss';\r\n\r\nconst Login = (props) => {\r\n  const {\r\n    loading,\r\n    login,\r\n    // setAlert,\r\n  } = props;\r\n\r\n  const classes = useStyles();\r\n  const [user, setUser] = useState({\r\n    username: '',\r\n    password: '',\r\n  });\r\n\r\n  const { username, password } = user;\r\n\r\n  const onChange = (e) => setUser({ ...user, [e.target.name]: e.target.value });\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (username === '' || password === '') {\r\n     setAlert('Please enter all fields');\r\n    } else {\r\n      login({ username, password });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${WEBSITE_NAME} | Login`}</title>\r\n      </Helmet>\r\n      <div className={`${classes.root} card-shadow text-center`}>\r\n        <h3 className='title'>Sign in</h3>\r\n        <h6 className='subtitle'>Use your email and password provided<br></br> by your organization</h6>\r\n\r\n        <form className='mt-4' onSubmit={onSubmit}>\r\n          <div className='form-group'>\r\n            <input\r\n              className='input-text'\r\n              type='text'\r\n              name='username'\r\n              value={username}\r\n              placeholder='Username'\r\n              onChange={onChange}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className='form-group'>\r\n            <input\r\n              className='input-text'\r\n              type='password'\r\n              name='password'\r\n              value={password}\r\n              placeholder='Password'\r\n              onChange={onChange}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {loading ? (\r\n            <Spinner />\r\n          ) : (\r\n            <input\r\n              type='submit'\r\n              value='Login'\r\n              className='button-primary mt-3'\r\n            />\r\n          )}\r\n        </form>\r\n\r\n        <p className='form-link mt-3'>\r\n          Login Trouble?{' '}\r\n          <Link to='/login'>\r\n            <span>Reset password</span>\r\n          </Link>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nLogin.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n  error: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  login: PropTypes.func.isRequired,\r\n  clearErrors: PropTypes.func.isRequired,\r\n  // setAlert: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapSateToProps = (state) => ({\r\n  error: state.auth.error,\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  loading: state.auth.loading,\r\n});\r\n\r\nexport default connect(mapSateToProps, { login, clearErrors, setAlert })(Login);\r\n"]},"metadata":{},"sourceType":"module"}