{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc cam\\\\Desktop\\\\soc\\\\src\\\\Components\\\\Pages\\\\Login\\\\login.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Spinner from '../../Layout/Spinner/Spinner';\nimport Input from '../../Pages/Requests/InputElement';\nimport { BUTTON_PRIMARY_OUTLINE } from '../../Styles/Button';\nimport styled from 'styled-components';\nimport * as actions from '../../../redux/actions/index';\nconst StyledDiv = styled.div`\n  border-radius: 10px;\n  box-shadow: 0px 13px 26px #ccc;\n  width: 60%;\n  margin: 16px auto;\n  border: 1px solid #eee;\n  padding: 16px;\n  text-align: center;\n  \n  @media (min-width: 500px) {\n    width: 450px;\n  }\n`;\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 20\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }\n      }, this.props.error.message);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 28\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(StyledDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      style: BUTTON_PRIMARY_OUTLINE,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, \" Login \"))));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:/Users/pc cam/Desktop/soc/src/Components/Pages/Login/login.js"],"names":["React","Component","connect","Redirect","Spinner","Input","BUTTON_PRIMARY_OUTLINE","styled","actions","StyledDiv","div","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAGA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,KAAKC,OAAZ,MAAyB,8BAAzB;AAEA,MAAMC,SAAS,GAAGF,MAAM,CAACG,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAeA,MAAMC,IAAN,SAAmBV,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBW,KADyB,GACjB;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,KAAK,EAAE;AACHC,UAAAA,WAAW,EAAE,OADV;AAEHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFZ;AAMHC,UAAAA,KAAK,EAAE,EANJ;AAOHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERC,YAAAA,OAAO,EAAE;AAFD,WAPT;AAWHC,UAAAA,KAAK,EAAE,KAXJ;AAYHC,UAAAA,OAAO,EAAE;AAZN,SADD;AAeNC,QAAAA,QAAQ,EAAE;AACNV,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,UADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFT;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERK,YAAAA,SAAS,EAAE;AAFH,WAPN;AAWNH,UAAAA,KAAK,EAAE,KAXD;AAYNC,UAAAA,OAAO,EAAE;AAZH;AAfJ,OADN;AA+BJG,MAAAA,QAAQ,EAAE;AA/BN,KADiB;;AAAA,SAyEzBC,mBAzEyB,GAyEH,CAAEC,KAAF,EAASC,WAAT,KAA0B;AAC5C,YAAMC,eAAe,GAAG,EACpB,GAAG,KAAKnB,KAAL,CAAWC,QADM;AAEpB,SAACiB,WAAD,GAAe,EACX,GAAG,KAAKlB,KAAL,CAAWC,QAAX,CAAoBiB,WAApB,CADQ;AAEXX,UAAAA,KAAK,EAAEU,KAAK,CAACG,MAAN,CAAab,KAFT;AAGXI,UAAAA,KAAK,EAAE,KAAKU,aAAL,CAAoBJ,KAAK,CAACG,MAAN,CAAab,KAAjC,EAAwC,KAAKP,KAAL,CAAWC,QAAX,CAAoBiB,WAApB,EAAiCV,UAAzE,CAHI;AAIXI,UAAAA,OAAO,EAAE;AAJE;AAFK,OAAxB;AASA,WAAKU,QAAL,CAAe;AAAErB,QAAAA,QAAQ,EAAEkB;AAAZ,OAAf;AACH,KApFwB;;AAAA,SAsFzBI,aAtFyB,GAsFPN,KAAF,IAAa;AACzBA,MAAAA,KAAK,CAACO,cAAN;AACA,WAAKC,KAAL,CAAWC,MAAX,CAAmB,KAAK1B,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BK,KAA7C,EAAoD,KAAKP,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BN,KAAjF,EAAwF,KAAKP,KAAL,CAAWe,QAAnG;AACH,KAzFwB;;AAAA,SA2FzBY,qBA3FyB,GA2FD,MAAM;AAC1B,WAAKL,QAAL,CAAcM,SAAS,IAAI;AACvB,eAAO;AAACb,UAAAA,QAAQ,EAAE,CAACa,SAAS,CAACb;AAAtB,SAAP;AACH,OAFD;AAGH,KA/FwB;AAAA;;AAoCzBc,EAAAA,iBAAiB,GAAG;AAChB,QAAI,CAAC,KAAKJ,KAAL,CAAWK,cAAZ,IAA8B,KAAKL,KAAL,CAAWM,gBAAX,KAAgC,GAAlE,EAAuE;AACnE,WAAKN,KAAL,CAAWO,qBAAX;AACH;AACJ;;AAEDX,EAAAA,aAAa,CAAGd,KAAH,EAAU0B,KAAV,EAAkB;AAC3B,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAK,CAACD,KAAN,EAAc;AACV,aAAO,IAAP;AACH;;AAED,QAAKA,KAAK,CAACxB,QAAX,EAAsB;AAClByB,MAAAA,OAAO,GAAG3B,KAAK,CAAC4B,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,QAAKD,KAAK,CAACnB,SAAX,EAAuB;AACnBoB,MAAAA,OAAO,GAAG3B,KAAK,CAAC6B,MAAN,IAAgBH,KAAK,CAACnB,SAAtB,IAAmCoB,OAA7C;AACH;;AAED,QAAKD,KAAK,CAACI,SAAX,EAAuB;AACnBH,MAAAA,OAAO,GAAG3B,KAAK,CAAC6B,MAAN,IAAgBH,KAAK,CAACI,SAAtB,IAAmCH,OAA7C;AACH;;AAED,QAAKD,KAAK,CAACvB,OAAX,EAAqB;AACjB,YAAM4B,OAAO,GAAG,uIAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAchC,KAAd,KAAyB2B,OAAnC;AACH;;AAED,QAAKD,KAAK,CAACO,SAAX,EAAuB;AACnB,YAAMF,OAAO,GAAG,OAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAchC,KAAd,KAAyB2B,OAAnC;AACH;;AAED,WAAOA,OAAP;AACH;;AA0BDO,EAAAA,MAAM,GAAI;AACN,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAM,IAAIC,GAAV,IAAiB,KAAK3C,KAAL,CAAWC,QAA5B,EAAuC;AACnCyC,MAAAA,iBAAiB,CAACE,IAAlB,CAAwB;AACpBC,QAAAA,EAAE,EAAEF,GADgB;AAEpBG,QAAAA,MAAM,EAAE,KAAK9C,KAAL,CAAWC,QAAX,CAAoB0C,GAApB;AAFY,OAAxB;AAIH;;AAED,QAAII,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAuBC,WAAW,iBACzC,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmB3C,WAFpC;AAGI,MAAA,aAAa,EAAE8C,WAAW,CAACH,MAAZ,CAAmB1C,aAHtC;AAII,MAAA,KAAK,EAAE6C,WAAW,CAACH,MAAZ,CAAmBvC,KAJ9B;AAKI,MAAA,OAAO,EAAE,CAAC0C,WAAW,CAACH,MAAZ,CAAmBnC,KALjC;AAMI,MAAA,cAAc,EAAEsC,WAAW,CAACH,MAAZ,CAAmBtC,UANvC;AAOI,MAAA,OAAO,EAAEyC,WAAW,CAACH,MAAZ,CAAmBlC,OAPhC;AAQI,MAAA,OAAO,EAAIK,KAAF,IAAa,KAAKD,mBAAL,CAA0BC,KAA1B,EAAiCgC,WAAW,CAACJ,EAA7C,CAR1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,CAAX;;AAWA,QAAI,KAAKpB,KAAL,CAAWyB,OAAf,EAAwB;AACpBH,MAAAA,IAAI,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,QAAII,YAAY,GAAG,IAAnB;;AAEA,QAAI,KAAK1B,KAAL,CAAW2B,KAAf,EAAsB;AAClBD,MAAAA,YAAY,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAK1B,KAAL,CAAW2B,KAAX,CAAiBC,OAArB,CADJ;AAGH;;AAED,QAAIC,YAAY,GAAG,IAAnB;;AACA,QAAI,KAAK7B,KAAL,CAAW8B,eAAf,EAAgC;AAC5BD,MAAAA,YAAY,gBAAG,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,KAAK7B,KAAL,CAAWM,gBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AACH;;AAED,wBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKuB,YADL,EAEKH,YAFL,eAGI;AAAM,MAAA,QAAQ,EAAE,KAAK5B,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKwB,IADL,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAQ,MAAA,KAAK,EAAErD,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,CAHJ,CADF,CADF;AAaH;;AAlJwB;;AAmJ5B;;AAID,MAAM8D,eAAe,GAAGxD,KAAK,IAAI;AAC7B,SAAO;AACHkD,IAAAA,OAAO,EAAElD,KAAK,CAACyD,IAAN,CAAWP,OADjB;AAEHE,IAAAA,KAAK,EAAEpD,KAAK,CAACyD,IAAN,CAAWL,KAFf;AAGHG,IAAAA,eAAe,EAAEvD,KAAK,CAACyD,IAAN,CAAWC,KAAX,KAAqB,IAHnC;AAIH3B,IAAAA,gBAAgB,EAAE/B,KAAK,CAACyD,IAAN,CAAW1B;AAJ1B,GAAP;AAMH,CAPD;;AASA,MAAM4B,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHlC,IAAAA,MAAM,EAAE,CAAExB,KAAF,EAASW,QAAT,EAAmBE,QAAnB,KAAiC6C,QAAQ,CAAEhE,OAAO,CAAC6D,IAAR,CAAcvD,KAAd,EAAqBW,QAArB,EAA+BE,QAA/B,CAAF,CAD9C;AAEHiB,IAAAA,qBAAqB,EAAE,MAAM4B,QAAQ,CAAChE,OAAO,CAACiE,mBAAR,CAA4B,GAA5B,CAAD;AAFlC,GAAP;AAIH,CALD;;AAOA,eAAevE,OAAO,CAAEkE,eAAF,EAAmBG,kBAAnB,CAAP,CAAgD5D,IAAhD,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nimport Spinner from '../../Layout/Spinner/Spinner'\r\nimport Input from '../../Pages/Requests/InputElement';\r\nimport { BUTTON_PRIMARY_OUTLINE } from '../../Styles/Button'\r\nimport styled from 'styled-components';\r\nimport * as actions from '../../../redux/actions/index'\r\n\r\nconst StyledDiv = styled.div`\r\n  border-radius: 10px;\r\n  box-shadow: 0px 13px 26px #ccc;\r\n  width: 60%;\r\n  margin: 16px auto;\r\n  border: 1px solid #eee;\r\n  padding: 16px;\r\n  text-align: center;\r\n  \r\n  @media (min-width: 500px) {\r\n    width: 450px;\r\n  }\r\n`;\r\n\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    checkValidity ( value, rules ) {\r\n        let isValid = true;\r\n        if ( !rules ) {\r\n            return true;\r\n        }\r\n\r\n        if ( rules.required ) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if ( rules.minLength ) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if ( rules.maxLength ) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        if ( rules.isEmail ) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test( value ) && isValid\r\n        }\r\n\r\n        if ( rules.isNumeric ) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test( value ) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = ( event, controlName ) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState( { controls: updatedControls } );\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup};\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return (\r\n          <StyledDiv>\r\n            <div >\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <br/> \r\n                    <button style={BUTTON_PRIMARY_OUTLINE} > Login </button>     \r\n                </form>\r\n            </div>\r\n          </StyledDiv>\r\n        );\r\n    }\r\n};\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );"]},"metadata":{},"sourceType":"module"}